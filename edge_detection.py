# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DaKXQWTq0arEaovJzue5XEZ9cJwDTsaV
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files

# Function to apply Sobel edge detection
def sobel_edge_detection(image):
    # Convert image to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    # Compute gradients along x and y directions
    grad_x = cv2.Sobel(gray, cv2.CV_64F, 1, 0, ksize=3)
    grad_y = cv2.Sobel(gray, cv2.CV_64F, 0, 1, ksize=3)
    # Compute gradient magnitude
    gradient_magnitude = np.sqrt(grad_x**2 + grad_y**2)
    # Threshold gradient magnitude
    _, sobel_edges = cv2.threshold(gradient_magnitude, 50, 255, cv2.THRESH_BINARY)
    return sobel_edges

# Function to apply Laplacian of Gaussian edge detection
def log_edge_detection(image):
    # Convert image to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    # Apply Gaussian blur
    blurred = cv2.GaussianBlur(gray, (3, 3), 0)
    # Apply Laplacian
    laplacian = cv2.Laplacian(blurred, cv2.CV_64F)
    # Threshold Laplacian response
    _, log_edges = cv2.threshold(np.uint8(np.absolute(laplacian)), 50, 255, cv2.THRESH_BINARY)
    return log_edges

# Function to apply Canny edge detection
def canny_edge_detection(image):
    # Convert image to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    # Apply Canny edge detector
    edges = cv2.Canny(gray, 100, 200)
    return edges

# Upload images
uploaded1 = files.upload()
uploaded2 = files.upload()
uploaded3 = files.upload()

# Process images
images = []
titles = []

for name, content in uploaded1.items():
    image1 = cv2.imdecode(np.frombuffer(content, np.uint8), cv2.IMREAD_COLOR)
    sobel_edges_1 = sobel_edge_detection(image1)
    log_edges_1 = log_edge_detection(image1)
    canny_edges_1 = canny_edge_detection(image1)
    images.extend([image1, sobel_edges_1, log_edges_1, canny_edges_1])
    titles.extend(['Original Image', 'Sobel Edge Detection', 'Laplacian of Gaussian (LoG) Edge Detection', 'Canny Edge Detection'])

for name, content in uploaded2.items():
    image2 = cv2.imdecode(np.frombuffer(content, np.uint8), cv2.IMREAD_COLOR)
    sobel_edges_2 = sobel_edge_detection(image2)
    log_edges_2 = log_edge_detection(image2)
    canny_edges_2 = canny_edge_detection(image2)
    images.extend([image2, sobel_edges_2, log_edges_2, canny_edges_2])
    titles.extend(['Original Image', 'Sobel Edge Detection', 'Laplacian of Gaussian (LoG) Edge Detection', 'Canny Edge Detection'])

for name, content in uploaded3.items():
    image3 = cv2.imdecode(np.frombuffer(content, np.uint8), cv2.IMREAD_COLOR)
    sobel_edges_3 = sobel_edge_detection(image3)
    log_edges_3 = log_edge_detection(image3)
    canny_edges_3 = canny_edge_detection(image3)
    images.extend([image3, sobel_edges_3, log_edges_3, canny_edges_3])
    titles.extend(['Original Image', 'Sobel Edge Detection', 'Laplacian of Gaussian (LoG) Edge Detection', 'Canny Edge Detection'])

# Display images with captions
fig, axs = plt.subplots(3, 4, figsize=(15, 15))
axs = axs.ravel()

for i, (image, title) in enumerate(zip(images, titles)):
    axs[i].imshow(image, cmap='gray' if len(image.shape) == 2 else None)
    axs[i].set_title(title)
    axs[i].axis('off')

plt.tight_layout()
plt.show()